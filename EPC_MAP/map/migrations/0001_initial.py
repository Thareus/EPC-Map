# Generated by Django 5.1.7 on 2025-03-12 22:56

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('lmk_key', models.CharField(help_text='Individual lodgement identifier', max_length=100, primary_key=True, serialize=False)),
                ('building_reference_number', models.CharField(blank=True, help_text='Unique identifier for the property', max_length=100, null=True)),
                ('uprn', models.BigIntegerField(blank=True, help_text='Unique Property Reference Number', null=True)),
                ('uprn_source', models.CharField(blank=True, help_text="Source of UPRN ('Energy Assessor' or 'Address Matched')", max_length=20, null=True)),
                ('address1', models.CharField(blank=True, max_length=255, null=True)),
                ('address2', models.CharField(blank=True, max_length=255, null=True)),
                ('address3', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, help_text='Concatenation of address1, address2, address3', max_length=765, null=True)),
                ('postcode', models.CharField(blank=True, max_length=10, null=True)),
                ('posttown', models.CharField(blank=True, max_length=100, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, editable=False, max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, editable=False, max_digits=10, null=True, verbose_name='Longitude')),
                ('local_authority', models.CharField(blank=True, help_text='ONS code for local authority', max_length=50, null=True)),
                ('local_authority_label', models.CharField(blank=True, help_text='Name of local authority', max_length=100, null=True)),
                ('constituency', models.CharField(blank=True, help_text='ONS code for parliamentary constituency', max_length=50, null=True)),
                ('constituency_label', models.CharField(blank=True, help_text='Name of parliamentary constituency', max_length=100, null=True)),
                ('county', models.CharField(blank=True, max_length=100, null=True)),
                ('inspection_date', models.DateField(blank=True, null=True)),
                ('lodgement_date', models.DateField(blank=True, null=True)),
                ('lodgement_datetime', models.DateTimeField(blank=True, null=True)),
                ('transaction_type', models.CharField(blank=True, help_text='Type of transaction that triggered EPC', max_length=100, null=True)),
                ('tenure', models.CharField(blank=True, help_text='Tenure type of the property', max_length=150, null=True)),
                ('property_type', models.CharField(blank=True, help_text='Type of property (House, Flat, etc.)', max_length=50, null=True)),
                ('built_form', models.CharField(blank=True, help_text='Building type (Detached, Semi-Detached, etc.)', max_length=50, null=True)),
                ('total_floor_area', models.DecimalField(blank=True, decimal_places=3, help_text='Total useful floor area in m²', max_digits=10, null=True)),
                ('floor_level', models.CharField(blank=True, help_text='Floor level for flats and maisonettes', max_length=20, null=True)),
                ('flat_top_storey', models.CharField(blank=True, help_text='Whether flat is on top storey', max_length=5, null=True)),
                ('flat_storey_count', models.DecimalField(blank=True, decimal_places=2, help_text='Number of storeys in apartment block', max_digits=5, null=True)),
                ('construction_age_band', models.CharField(blank=True, choices=[('before-1900', 'before 1900'), ('1900-1929', '1900-1929'), ('1930-1949', '1930-1949'), ('1950-1966', '1950-1966'), ('1967-1975', '1967-1975'), ('1976-1982', '1976-1982'), ('1983-1990', '1983-1990'), ('1991-1995', '1991-1995'), ('1996-2002', '1996-2002'), ('2003-2006', '2003-2006'), ('2007-2011', '2007-2011'), ('2012-onwards', '2012 onwards')], help_text='Age band when building constructed', max_length=40, null=True)),
                ('number_habitable_rooms', models.FloatField(blank=True, null=True)),
                ('number_heated_rooms', models.FloatField(blank=True, null=True)),
                ('floor_height', models.DecimalField(blank=True, decimal_places=3, help_text='Average height of storey in meters', max_digits=7, null=True)),
                ('heat_loss_corridor', models.CharField(blank=True, max_length=20, null=True)),
                ('unheated_corridor_length', models.DecimalField(blank=True, decimal_places=3, max_digits=7, null=True)),
                ('current_energy_rating', models.CharField(blank=True, help_text='Current energy rating (A to G)', max_length=1, null=True)),
                ('potential_energy_rating', models.CharField(blank=True, help_text='Potential energy rating (A to G)', max_length=1, null=True)),
                ('current_energy_efficiency', models.IntegerField(blank=True, help_text='Current energy efficiency value', null=True)),
                ('potential_energy_efficiency', models.IntegerField(blank=True, help_text='Potential energy efficiency value', null=True)),
                ('environmental_impact_current', models.IntegerField(blank=True, help_text='Current environmental impact rating', null=True)),
                ('environmental_impact_potential', models.IntegerField(blank=True, help_text='Potential environmental impact rating', null=True)),
                ('energy_consumption_current', models.FloatField(blank=True, help_text='Current energy consumption (kWh/m²)', null=True)),
                ('energy_consumption_potential', models.FloatField(blank=True, help_text='Potential energy consumption (kWh/m²)', null=True)),
                ('co2_emissions_current', models.DecimalField(blank=True, decimal_places=2, help_text='CO₂ emissions per year in tonnes/year', max_digits=10, null=True)),
                ('co2_emiss_curr_per_floor_area', models.DecimalField(blank=True, decimal_places=2, help_text='CO₂ emissions per m² per year in kg/m²', max_digits=10, null=True)),
                ('co2_emissions_potential', models.DecimalField(blank=True, decimal_places=2, help_text='Potential CO₂ emissions per year in tonnes/year', max_digits=10, null=True)),
                ('lighting_cost_current', models.FloatField(blank=True, help_text='Current annual lighting costs (GBP)', null=True)),
                ('lighting_cost_potential', models.FloatField(blank=True, help_text='Potential annual lighting costs (GBP)', null=True)),
                ('heating_cost_current', models.FloatField(blank=True, help_text='Current annual heating costs (GBP)', null=True)),
                ('heating_cost_potential', models.FloatField(blank=True, help_text='Potential annual heating costs (GBP)', null=True)),
                ('hot_water_cost_current', models.FloatField(blank=True, help_text='Current annual hot water costs (GBP)', null=True)),
                ('hot_water_cost_potential', models.FloatField(blank=True, help_text='Potential annual hot water costs (GBP)', null=True)),
                ('main_fuel', models.CharField(blank=True, help_text='Type of fuel for central heating', max_length=100, null=True)),
                ('main_heating_controls', models.CharField(blank=True, help_text='Type of main heating controls', max_length=100, null=True)),
                ('energy_tariff', models.CharField(blank=True, help_text='Type of electricity tariff', max_length=50, null=True)),
                ('mains_gas_flag', models.CharField(blank=True, help_text='Whether mains gas is available', max_length=5, null=True)),
                ('glazed_type', models.CharField(blank=True, help_text='Type of glazing (single, double, triple)', max_length=50, null=True)),
                ('glazed_area', models.CharField(blank=True, help_text='Ranged estimate of glazed area', max_length=25, null=True)),
                ('multi_glaze_proportion', models.FloatField(blank=True, help_text='Proportion of glazing that is multi-glazed', null=True)),
                ('extension_count', models.IntegerField(blank=True, help_text='Number of extensions (0-4)', null=True)),
                ('number_open_fireplaces', models.IntegerField(blank=True, help_text='Number of open fireplaces', null=True)),
                ('low_energy_lighting', models.IntegerField(blank=True, help_text='Percentage of low energy lighting present', null=True)),
                ('fixed_lighting_outlets_count', models.FloatField(blank=True, help_text='Number of fixed lighting outlets', null=True)),
                ('low_energy_fixed_light_count', models.FloatField(blank=True, help_text='Number of low-energy fixed lighting outlets', null=True)),
                ('wind_turbine_count', models.FloatField(blank=True, help_text='Number of wind turbines', null=True)),
                ('photo_supply', models.FloatField(blank=True, help_text='Percentage of photovoltaic area as percentage of roof area', null=True)),
                ('solar_water_heating_flag', models.CharField(blank=True, help_text='Whether heating is solar powered', max_length=5, null=True)),
                ('mechanical_ventilation', models.CharField(blank=True, help_text='Type of mechanical ventilation', max_length=50, null=True)),
                ('hotwater_description', models.CharField(blank=True, max_length=255, null=True)),
                ('hot_water_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('hot_water_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('floor_description', models.CharField(blank=True, max_length=255, null=True)),
                ('floor_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('floor_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('windows_description', models.CharField(blank=True, max_length=255, null=True)),
                ('windows_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('windows_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('walls_description', models.CharField(blank=True, max_length=255, null=True)),
                ('walls_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('walls_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('secondheat_description', models.CharField(blank=True, max_length=255, null=True)),
                ('sheating_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('sheating_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('roof_description', models.CharField(blank=True, max_length=255, null=True)),
                ('roof_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('roof_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('mainheat_description', models.CharField(blank=True, max_length=255, null=True)),
                ('mainheat_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('mainheat_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('mainheatcont_description', models.CharField(blank=True, max_length=255, null=True)),
                ('mainheatc_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('mainheatc_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('lighting_description', models.CharField(blank=True, max_length=255, null=True)),
                ('lighting_energy_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
                ('lighting_env_eff', models.CharField(blank=True, choices=[('very_good', 'very good'), ('good', 'good'), ('average', 'average'), ('poor', 'poor'), ('very_poor', 'very poor')], max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Energy Performance Certificate',
                'verbose_name_plural': 'Energy Performance Certificates',
                'indexes': [models.Index(fields=['postcode'], name='map_certifi_postcod_ce207d_idx'), models.Index(fields=['local_authority'], name='map_certifi_local_a_d7b09b_idx'), models.Index(fields=['current_energy_rating'], name='map_certifi_current_6753fc_idx'), models.Index(fields=['inspection_date'], name='map_certifi_inspect_8c9444_idx'), models.Index(fields=['lodgement_date'], name='map_certifi_lodgeme_96c0f9_idx'), models.Index(fields=['property_type'], name='map_certifi_propert_06d8e0_idx'), models.Index(fields=['built_form'], name='map_certifi_built_f_0bc8be_idx'), models.Index(fields=['uprn'], name='map_certifi_uprn_e5c898_idx')],
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('improvement_item', models.IntegerField(help_text='Order of the recommendation on the EPC')),
                ('improvement_summary_text', models.CharField(help_text='Short description of the improvement', max_length=255)),
                ('improvement_descr_text', models.TextField(help_text='Detailed description of the improvement')),
                ('improvement_id', models.IntegerField(help_text='Code number for the improvement measure')),
                ('improvement_id_text', models.CharField(help_text='Text associated with the improvement measure', max_length=255)),
                ('indicative_cost', models.CharField(help_text='Indicative cost range for the improvement', max_length=100)),
                ('certificate', models.ForeignKey(db_column='lmk_key', on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='map.certificate')),
            ],
            options={
                'verbose_name': 'Energy Improvement Recommendation',
                'verbose_name_plural': 'Energy Improvement Recommendations',
                'ordering': ['certificate', 'improvement_item'],
                'indexes': [models.Index(fields=['improvement_id'], name='map_recomme_improve_bd2fb3_idx')],
                'unique_together': {('certificate', 'improvement_item')},
            },
        ),
    ]
